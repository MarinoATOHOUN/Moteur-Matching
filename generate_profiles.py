#!/usr/bin/env python3
"""
Script pour g√©n√©rer des profils fictifs bas√©s sur la cartographie des m√©tiers du num√©rique.
G√©n√®re au moins 5 profils par famille de m√©tiers.
"""

import pandas as pd
import random
from typing import List, Dict

# Lire les fichiers existants
df_metiers = pd.read_csv("cartographie-metiers-numeriques.csv", sep=';')
df_profiles_existing = pd.read_csv("backend/profiles.csv")

# Obtenir le dernier ID
last_id = df_profiles_existing['id'].max()

# Donn√©es pour la g√©n√©ration de profils
DIPLOMES = [
    "Licence Informatique",
    "Master Data Science",
    "Master Informatique",
    "Dipl√¥me d'ing√©nieur Logiciel",
    "Dipl√¥me d'ing√©nieur Informatique",
    "PhD en Intelligence Artificielle",
    "MBA Management Digital",
    "Master Marketing Digital",
    "Licence Communication",
    "Master Design",
    "BTS Informatique",
    "DUT R√©seaux et T√©l√©communications"
]

CERTIFICATIONS = [
    "AWS Certified Solutions Architect",
    "Microsoft Azure Administrator",
    "Google Data Engineer",
    "Scrum Master",
    "PMP",
    "CISSP",
    "CEH",
    "Google Analytics",
    "HubSpot Marketing",
    "Adobe Certified Expert",
    "Kubernetes Administrator",
    "Aucune"
]

SOFT_SKILLS = [
    "Leadership", "Communication", "Travail en √©quipe", "Cr√©ativit√©",
    "R√©solution de probl√®mes", "Adaptabilit√©", "Esprit critique",
    "Gestion du temps", "Empathie", "Pens√©e analytique"
]

LANGUES = [
    ["Fran√ßais", "Anglais"],
    ["Fran√ßais", "Anglais", "Espagnol"],
    ["Fran√ßais", "Anglais", "Allemand"],
    ["Anglais", "Espagnol"],
    ["Fran√ßais", "Arabe"],
    ["Fran√ßais"]
]

LOCALISATIONS = [
    "Paris, France",
    "Dakar, S√©n√©gal",
    "Abidjan, C√¥te d'Ivoire",
    "Casablanca, Maroc",
    "Montr√©al, Canada",
    "Lyon, France",
    "Tunis, Tunisie",
    "Bruxelles, Belgique",
    "Gen√®ve, Suisse",
    "Bamako, Mali"
]

MOBILITES = ["Mobile", "Pas mobile", "Ouvert au t√©l√©travail"]
DISPONIBILITES = ["Imm√©diate", "Dans 1 mois", "Dans 3 mois"]

ENTREPRISES = [
    "TechCorp", "DataSolutions", "CloudInnovate", "DigitalFirst",
    "StartupHub", "InnovateLab", "TechVentures", "DataDriven",
    "CloudMasters", "DevFactory", "AgileTeam", "SmartTech"
]

# Comp√©tences par famille de m√©tiers
COMPETENCES_PAR_FAMILLE = {
    "Communication digitale, marketing et e-Commerce": {
        "hard_skills": [
            "Google Analytics", "SEO", "SEA", "Google Ads", "Facebook Ads",
            "Content Marketing", "Email Marketing", "WordPress", "Photoshop",
            "Illustrator", "InDesign", "Hootsuite", "Buffer", "Mailchimp",
            "HubSpot", "Salesforce", "HTML", "CSS", "JavaScript"
        ],
        "experiences": [
            "Community Manager", "Charg√© de communication", "Responsable marketing",
            "Chef de projet digital", "Consultant SEO", "Traffic Manager"
        ]
    },
    "S√©curit√©, cloud, r√©seau": {
        "hard_skills": [
            "AWS", "Azure", "GCP", "Kubernetes", "Docker", "Linux",
            "Windows Server", "Cisco", "Firewall", "VPN", "SIEM",
            "Penetration Testing", "Wireshark", "Nmap", "Metasploit",
            "Python", "Bash", "PowerShell", "Terraform", "Ansible"
        ],
        "experiences": [
            "Administrateur syst√®me", "Ing√©nieur Cloud", "Analyste cybers√©curit√©",
            "Architecte r√©seau", "Ing√©nieur DevOps", "Expert s√©curit√©"
        ]
    },
    "Data / IA": {
        "hard_skills": [
            "Python", "R", "SQL", "NoSQL", "MongoDB", "PostgreSQL",
            "TensorFlow", "PyTorch", "Scikit-learn", "Pandas", "Numpy",
            "Spark", "Hadoop", "Tableau", "Power BI", "Jupyter",
            "Machine Learning", "Deep Learning", "NLP", "Computer Vision"
        ],
        "experiences": [
            "Data Scientist", "Data Engineer", "Data Analyst",
            "ML Engineer", "AI Researcher", "Data Architect"
        ]
    },
    "D√©veloppement, test et Ops": {
        "hard_skills": [
            "Python", "Java", "JavaScript", "TypeScript", "C#", "PHP",
            "React", "Angular", "Vue.js", "Node.js", "Django", "Flask",
            "Spring Boot", "Docker", "Kubernetes", "Git", "Jenkins",
            "CI/CD", "Agile", "Scrum", "REST API", "GraphQL"
        ],
        "experiences": [
            "D√©veloppeur Full Stack", "D√©veloppeur Backend", "D√©veloppeur Frontend",
            "Ing√©nieur DevOps", "Architecte logiciel", "Tech Lead"
        ]
    },
    "Gestion / Pilotage / Strat√©gie": {
        "hard_skills": [
            "Agile", "Scrum", "Kanban", "Jira", "Confluence", "MS Project",
            "Trello", "Asana", "Slack", "Teams", "Zoom", "Excel",
            "PowerPoint", "Gestion de budget", "KPI", "Roadmap",
            "Strat√©gie digitale", "Transformation digitale"
        ],
        "experiences": [
            "Chef de projet", "Product Owner", "Scrum Master",
            "Directeur de projet", "Product Manager", "CTO"
        ]
    },
    "Interface / graphisme / design": {
        "hard_skills": [
            "Figma", "Adobe XD", "Sketch", "Photoshop", "Illustrator",
            "InDesign", "After Effects", "Premiere Pro", "Blender",
            "Unity", "Unreal Engine", "UI Design", "UX Design",
            "Prototyping", "Wireframing", "Design Thinking", "HTML", "CSS"
        ],
        "experiences": [
            "UX Designer", "UI Designer", "Webdesigner", "Motion Designer",
            "Game Designer", "Graphiste", "Directeur artistique"
        ]
    }
}

def generate_profile(famille: str, metier: str, poste: str, profile_id: int) -> Dict:
    """G√©n√®re un profil fictif r√©aliste pour un m√©tier donn√©."""
    
    # S√©lectionner les comp√©tences appropri√©es
    competences = COMPETENCES_PAR_FAMILLE.get(famille, COMPETENCES_PAR_FAMILLE["D√©veloppement, test et Ops"])
    
    # G√©n√©rer les donn√©es du profil
    exp_years = random.randint(1, 15)
    diplome = random.choice(DIPLOMES)
    certification = random.choice(CERTIFICATIONS)
    
    # S√©lectionner 5-8 hard skills al√©atoires
    hard_skills = random.sample(competences["hard_skills"], min(random.randint(5, 8), len(competences["hard_skills"])))
    
    # S√©lectionner 3 soft skills
    soft_skills = random.sample(SOFT_SKILLS, 3)
    
    # Autres attributs
    langues = random.choice(LANGUES)
    localisation = random.choice(LOCALISATIONS)
    mobilite = random.choice(MOBILITES)
    disponibilite = random.choice(DISPONIBILITES)
    
    # G√©n√©rer l'exp√©rience professionnelle
    nb_experiences = min(exp_years // 2, 3)  # 1 exp√©rience tous les 2 ans, max 3
    experiences_list = []
    
    for i in range(max(1, nb_experiences)):
        exp_poste = random.choice(competences["experiences"])
        entreprise = random.choice(ENTREPRISES)
        annee_debut = 2024 - exp_years + (i * 2)
        annee_fin = annee_debut + random.randint(1, 3)
        experiences_list.append(f"{exp_poste} chez {entreprise} ({annee_debut}-{annee_fin})")
    
    experiences = ". ".join(experiences_list)
    
    # Cr√©er le texte complet
    full_text = (
        f"Exp√©riences: {experiences}. "
        f"Dipl√¥mes: {diplome}. "
        f"Certifications: {certification}. "
        f"Comp√©tences techniques: {', '.join(hard_skills)}. "
        f"Comp√©tences comportementales: {', '.join(soft_skills)}. "
        f"Langues: {', '.join(langues)}. "
        f"Localisation: {localisation}. "
        f"Mobilit√©: {mobilite}. "
        f"Disponibilit√©: {disponibilite}. "
        f"Poste recherch√©: {poste}."
    )
    
    return {
        'id': profile_id,
        'exp_years': exp_years,
        'diplomes': diplome,
        'certifications': certification,
        'hard_skills': str(hard_skills),
        'soft_skills': str(soft_skills),
        'langues': str(langues),
        'localisation': localisation,
        'mobilite': mobilite,
        'disponibilite': disponibilite,
        'full_text': full_text
    }

def main():
    """G√©n√®re les profils et les ajoute au fichier CSV."""
    
    print("üöÄ G√©n√©ration de profils fictifs...")
    print(f"üìä Nombre de m√©tiers dans la cartographie: {len(df_metiers)}")
    print(f"üìã ID de d√©part: {last_id + 1}")
    
    # Grouper par famille
    familles = df_metiers.groupby('Famille')
    
    new_profiles = []
    current_id = last_id + 1
    
    # Calculer combien de profils g√©n√©rer pour atteindre 300
    target_total = 300
    current_total = len(df_profiles_existing)
    profiles_needed = target_total - current_total
    
    # R√©partir √©quitablement entre les familles
    nb_familles = len(familles)
    profiles_per_famille = profiles_needed // nb_familles
    
    print(f"\nüéØ Objectif: {target_total} profils")
    print(f"üìä Profils existants: {current_total}")
    print(f"üÜï Profils √† g√©n√©rer: {profiles_needed}")
    print(f"üìÅ Profils par famille: ~{profiles_per_famille}")
    
    for famille_name, groupe in familles:
        print(f"\nüìÅ Famille: {famille_name}")
        print(f"   Nombre de m√©tiers: {len(groupe)}")
        
        # G√©n√©rer le nombre calcul√© de profils par famille
        nb_profiles_to_generate = profiles_per_famille
        
        for i in range(nb_profiles_to_generate):
            # S√©lectionner un m√©tier al√©atoire dans la famille
            metier_row = groupe.sample(1).iloc[0]
            
            profile = generate_profile(
                famille=famille_name,
                metier=metier_row['Metiers'],
                poste=metier_row['Poste'],
                profile_id=current_id
            )
            
            new_profiles.append(profile)
            current_id += 1
        
        print(f"   ‚úÖ {nb_profiles_to_generate} profils g√©n√©r√©s")
    
    # Cr√©er un DataFrame avec les nouveaux profils
    df_new_profiles = pd.DataFrame(new_profiles)
    
    # Combiner avec les profils existants
    df_all_profiles = pd.concat([df_profiles_existing, df_new_profiles], ignore_index=True)
    
    # Sauvegarder
    df_all_profiles.to_csv("backend/profiles.csv", index=False)
    
    print(f"\n‚úÖ G√©n√©ration termin√©e!")
    print(f"üìä Nombre total de profils: {len(df_all_profiles)}")
    print(f"üÜï Nouveaux profils ajout√©s: {len(new_profiles)}")
    print(f"üíæ Fichier sauvegard√©: backend/profiles.csv")
    
    # Afficher quelques statistiques
    print(f"\nüìà Statistiques:")
    print(f"   - Profils par localisation:")
    for loc, count in df_all_profiles['localisation'].value_counts().head(5).items():
        print(f"     ‚Ä¢ {loc}: {count}")
    
    print(f"\n   - Distribution de l'exp√©rience:")
    print(f"     ‚Ä¢ Junior (1-3 ans): {len(df_all_profiles[df_all_profiles['exp_years'] <= 3])}")
    print(f"     ‚Ä¢ Interm√©diaire (4-7 ans): {len(df_all_profiles[(df_all_profiles['exp_years'] > 3) & (df_all_profiles['exp_years'] <= 7)])}")
    print(f"     ‚Ä¢ Senior (8+ ans): {len(df_all_profiles[df_all_profiles['exp_years'] > 7])}")

if __name__ == "__main__":
    main()
